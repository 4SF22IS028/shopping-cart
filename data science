import matplotlib.pyplot as plt
import numpy as np
x=np.linspace(0,10,100)
y=np.sin(x)
plt.figure()
plt.plot(x,y)
plt.title("line chart")
categories=['A','B','C','D']
values=[20,35,30,25]
plt.figure()
plt.bar(categories,values)
plt.title("bar chart")
x=np.random.randn(100)
y=np.random.randn(100)
colors=np.random.rand(100)
sizes=100*np.random.rand(100)
plt.figure()
plt.scatter(x,y,c=colors,s=sizes,alpha=0.5)
plt.title("scatter plot")
sizes=[30,20,25,15,10]
labels=['A','B','C','D','E']
plt.figure()
plt.pie(sizes,labels=labels,autopct="%1.1f%%")
plt.title("pie chart")
plt.show()

import matplotlib.pyplot as plt
import numpy as np
X=['Jan','Feb','Mar','Apr','May','June','July','Aug','Sep','Oct','Nov','Dec']
Y1=[800,700,400,300,100,30,10,100,200,400,600,900]
Y2=[190,180,170,180,190,200,180,190,200,170,185,200]
plt.figure()
plt.plot(X,Y1,marker='*',color='pink',label='Jackets')
plt.plot(X,Y2,marker='*',color='green',label='Socks')
plt.title("Revenue - Jackets and Socks")
plt.xlabel("Months")
plt.ylabel("Revenue")
plt.xticks(rotation=90)
plt.yticks(np.arange(100,900,100),label=Y1)
plt.legend(loc='upper center')
plt.grid(True)

import pandas as pd
data={'Name':['John','emma','sant','lisa','tom'],
'Age':[25,30,28,32,27],
'Country':['USA','Canada','India','UK','Australia'],
'Salary':[50000,60000,70000,80000,65000]
     }
df=pd.DataFrame(data)
print("Original DataFrame")
print(df)
name_age=df[['Name','Age']]
print("Original DataFrame")
print(df)
name_age=df[['Name','Age']]
print("Name and Age columns")
print(name_age)
filtered_df=df[df['Country']=='USA']
print("\n Filtered DataFrame(Country='USA')")
print(filtered_df)
sorted_df=df.sort_values("Salary",ascending=False)
print("\n Sorted DataFrame(by ssalry in descending order)")
print(sorted_df)
average_Salary=df['Salary'].mean()
print("\n Average Salary",average_Salary)
df['Experience']=[3,6,4,8,5]
print("\n DataFrame with added Experience")
print(df)
df.loc[df['Name']=='Emma','Salary']=65000
print("\n DataFrame with updating emma salary")
print(df)
df.drop('Experience',axis=1)
print("\n DataFrame after deleting the column")
print(df)

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
dataset=pd.read_csv('iris_dataset.csv')
dataset.describe()
dataset.info()
X=dataset.iloc[:,[0,1,2,3]].values
y=dataset.iloc[:,4].values
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=0)
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.transform(X_test)
from sklearn.linear_model import LogisticRegression
classifier=LogisticRegression(random_state=0,solver='lbfgs',multi_class='auto')
classifier.fit(X_train,y_train)
y_pred=classifier.predict(X_test)
probs_y=classifier.predict_proba(X_test)
probs_y=np.round(probs_y,2)
res="{:<10}|{:<10}|{:<10}|{:<13}|{:<5}".format("y_test","y_pred","setora(%)","versicolor(%)","virginia(%)\n")
res+="-"*65+"\n"
res+="\n".join("{:<10}|{:<10}|{:<10}|{:<13}|{:<10}".format(x,y,a,b,c) for x,y,a,b,c in zip(y_test,y_pred,probs_y[:,0],probs_y[:,1],probs_y[:,2]))
res+="\n"+"-"*65+"\n"
print(res)
from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,y_pred)
print(cm)
import seaborn as sns
import pandas as pd
ax=plt.axes()
df_cm=cm
sns.heatmap(df_cm,annot=True,annot_kws={"size":30},fmt='d',cmap="Blues",ax=ax)
ax.set_title('Confusion Matrix')
plt.show()
