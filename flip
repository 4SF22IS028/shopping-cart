EXPERIMENT 1:- 1.Write C programs to implement basic UNIX system calls - read(), write(), open(),close(), lseek(), create().

Program:-
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int fd, ret;
    char buffer[20];

    // Create a new file
    fd = creat("example.txt", 0644);
    if (fd == -1) {
        perror("creat");
        exit(EXIT_FAILURE);
    }

    // Write to the file
    ret = write(fd, "Hello, World!", 13);
    if (ret == -1) {
        perror("write");
        exit(EXIT_FAILURE);
    }

    // Close the file
    ret = close(fd);
    if (ret == -1) {
        perror("close");
        exit(EXIT_FAILURE);
    }

    // Open the file again
    fd = open("example.txt", O_RDWR);
    if (fd == -1) {
        perror("open");
        exit(EXIT_FAILURE);
    }

    // Move the file cursor to the beginning of the file
    ret = lseek(fd, 0, SEEK_SET);
    if (ret == -1) {
        perror("lseek");
        exit(EXIT_FAILURE);
    }

    // Read from the file
    ret = read(fd, buffer, 13);
    if (ret == -1) {
        perror("read");
        exit(EXIT_FAILURE);
    }
    buffer[ret] = '\0'; // Null-terminate the string

    printf("Read from file: %s\n", buffer);

    // Close the file
    ret = close(fd);
    if (ret == -1) {
        perror("close");
        exit(EXIT_FAILURE);
    }
    return 0;
}

Output:-

 





























EXPERIMENT 2:- Write C programs to implement UNIX Directory API’s - opendir, closedir, readdir, mkdir.
Program:-
 #include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <sys/stat.h>
#include <errno.h>

void listDirectory(const char *path) {
    DIR *dir = opendir(path);
    if (dir == NULL) {
        perror("opendir");
        return;
    }

    struct dirent *entry;
    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name);
    }

    if (closedir(dir) == -1) {
        perror("closedir");
    }
}
 
void createDirectory(const char *path) {
    if (mkdir(path, 0755) == -1) {
        if (errno == EEXIST) {
            printf("Directory %s already exists.\n", path);
        } else {
            perror("mkdir");
        }
    } else {
        printf("Directory %s created successfully.\n", path);
    }
}

int main() {
    const char *dirPath = "./testdir";

    // Create a directory
    createDirectory(dirPath);

    // List the contents of the current directory
    printf("Listing current directory contents:\n");
    listDirectory(".");

    // List the contents of the new directory
    printf("\nListing new directory contents:\n");
    listDirectory(dirPath);

    return 0;
}










Output:-
 























EXPERIMENT 3:-Demonstrate the Process creation and Termination using System calls –fork (), vfork (), exit (), return 0.

Program:-

a.	fork():-

#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    pid_t pid;
    int status;
    	
    // fork() system call
    pid = fork();
    
    if (pid < 0) {
        printf("Error: fork() failed.\n");
        return 1;
    } else if (pid == 0) {
        // child process
        
        printf("This is the child process with PID: %d\n", getpid());
        printf("Parent process PID: %d\n", getppid());
        
        // exec() system call
        execlp("/bin/ls", "ls", NULL);
        
        printf("This should not be printed if exec() is successful.\n");
        return 0;
    } else {
        // parent process
    
    
        printf("This is the parent process with PID: %d\n", getpid());
        printf("Child process PID: %d\n", pid);
        
        // wait() system call
        wait(&status);
        
        printf("Child process exited with status: %d\n", status);
        
        return 0;
    }
}



Output:-

 














b.	 vfork ():-
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    pid_t pid;
    
    // Fork a child process using vfork()
    pid = vfork();

    if (pid == -1) {
        // Forking failed
        perror("vfork");
        return 1;
    } else if (pid == 0) {
        // Child process
        
        printf("Child process: Hello, I'm the child!\n");
        printf("Child process: My PID is %d\n", getpid());
        printf("Child process: My parent's PID is %d\n", getppid());
        
        // Terminate the child process
        _exit(0);
    } else {
        // Parent process
        
        printf("Parent process: Hello, I'm the parent!\n");
        printf("Parent process: My PID is %d\n", getpid());
        printf("Parent process: My child's PID is %d\n", pid);
        
        // Wait for the child process to terminate
        int status;
        waitpid(pid, &status, 0);
        
        if (WIFEXITED(status)) {
            printf("Parent process: Child process terminated normally.\n");
        } else {
            printf("Parent process: Child process terminated abnormally.\n");
        }
    }
return 0;
}


Output:-
 
























EXPERIMENT 4:- Write C programs to simulate Inter – Process Communication (IPC) techniques: Pipes, Messages Queues, and Shared Memory.
Program:-
	
#include <fcntl.h> 
#include <sys/stat.h> 
#include <sys/types.h> 
#include <unistd.h> 
 	
int main() 
{ 
int fd; 
char * myfifo = "/tmp/myfifo"; /* create the FIFO (named pipe) */ 
mkfifo(myfifo, 0666); 

fd = open(myfifo, O_WRONLY); 
write(fd,"Hi", sizeof("Hi")); /* write "Hi" to the FIFO */ 
close(fd); 
 	
unlink(myfifo); /* remove the FIFO */ 
return 0; 
} 
 	
[root@localhost /]# gedit reader.c 
 	
Reader Process (reader.c) 
 #include <fcntl.h> 	
#include <sys/stat.h> 
 #include <unistd.h> 
 	
 #define MAX_BUF 1024 
 	
 int main() 
 { 
 int fd; 
 char *myfifo = "/tmp/myfifo"; 
 char buf[MAX_BUF]; 
 
 /* open, read, and display the message from the FIFO */ 
 fd = open(myfifo, O_RDONLY); 
 read(fd, buf, MAX_BUF); 
 printf("Received: %s", buf); 
 close(fd); 	
 return 0; 
 } 



Output:-
Receiver:Hi






EXPERIMENT 5:- Simulate the following CPU scheduling algorithms 1. FCFS 2. SJF  3. Priority  4. Round Robin 5. SRTF then calculate average waiting time, average Turn-around Time, Average Response time.

Program:-
#include <stdio.h>

 void fcfs(int processes[], int n, int burst_time[]) {
 int waiting_time[n], turnaround_time[n], total_waiting_time = 0,
total_turnaround_time   = 0;
     waiting_time[0] = 0; // Waiting time for first process is 0

     // Calculating waiting time for each process
     for (int i = 1; i < n; i++) {
         waiting_time[i] = burst_time[i - 1] + waiting_time[i - 1];
         total_waiting_time += waiting_time[i];
     }

     // Calculating turnaround time for each process
     for (int i = 0; i < n; i++) {
         turnaround_time[i] = burst_time[i] + waiting_time[i];
         total_turnaround_time += turnaround_time[i];
     }

     printf("First-Come, First-Served (FCFS) Scheduling Algorithm\n");
     printf("--------------------------------------------------\n");
     printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");

     // Printing process details
     for (int i = 0; i < n; i++) {
         printf("%d\t%d\t\t%d\t\t%d\n", processes[i], burst_time[i],
waiting_time[i],  turnaround_time[i]);
     }

     printf("Average Waiting Time: %.2f\n", (float)total_waiting_time / n);
     printf("Average Turnaround Time: %.2f\n",
(float)total_turnaround_time / n);
     printf("\n");
 } 
 
 void sjf(int processes[], int n, int burst_time[]) {
     int waiting_time[n], turnaround_time[n], completion_time[n],
total_waiting_time = 0,  total_turnaround_time = 0;
 
     for (int i = 0; i < n; i++) {
         int shortest_job_index = i;

         // Find the shortest job
         for (int j = i + 1; j < n; j++) {
             if (burst_time[j] < burst_time[shortest_job_index])
                shortest_job_index = j;
         }

        // Swap the shortest job with the current process
        int temp = burst_time[i];
        burst_time[i] = burst_time[shortest_job_index];
        burst_time[shortest_job_index] = temp;

        temp = processes[i];
        processes[i] = processes[shortest_job_index];
        processes[shortest_job_index] = temp;
    }

waiting_time[0] = 0; // Waiting time for first process is 0

    // Calculating waiting time for each process
    for (int i = 1; i < n; i++) {
        waiting_time[i] = burst_time[i - 1] + waiting_time[i - 1];
        total_waiting_time += waiting_time[i];
    }

    // Calculating turnaround time for each process
    for (int i = 0; i < n; i++) {
        turnaround_time[i] = burst_time[i] + waiting_time[i];
        total_turnaround_time += turnaround_time[i];
    }

    printf("Shortest Job First (SJF) Scheduling Algorithm\n"); 
    printf("----------------------------------------------\n"); 
    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");

    // Printing process details 
        for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i], burst_time[i],
waiting_time[i], turnaround_time[i]);
    }

    printf("Average Waiting Time: %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);
    printf("\n");
}

 void roundRobin(int processes[], int n, int burst_time[], int quantum) {
     int remaining_time[n], waiting_time[n], turnaround_time[n],
total_waiting_time = 0,  total_turnaround_time = 0;

    // Copying burst time into remaining time array
    for (int i = 0; i < n; i++) {
        remaining_time[i] = burst_time[i];
    }

    int time = 0; // Current time

    // Run the round robin algorithm
    while (1) {
        int all_processes_completed = 1;

        // Traverse all processes

   for (int i = 0; i < n; i++) {
            if (remaining_time[i] > 0) {
                all_processes_completed = 0; // There is still a pending process

                if (remaining_time[i] > quantum) {
                    time += quantum;
                    remaining_time[i] -= quantum;
                } else {
                    time += remaining_time[i];
                    waiting_time[i] = time - burst_time[i];
                    remaining_time[i] = 0;
                }
            } 
        } 

        if (all_processes_completed) {
            break; 
        }
    }

    // Calculating turnaround time for each process
    for (int i = 0; i < n; i++) {
        turnaround_time[i] = burst_time[i] + waiting_time[i];
        total_waiting_time += waiting_time[i];
        total_turnaround_time += turnaround_time[i];
    }

    printf("Round Robin Scheduling Algorithm\n");
    printf("--------------------------------\n");
    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");

    // Printing process details
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i], burst_time[i],
waiting_time[i], turnaround_time[i]);
    }

    printf("Average Waiting Time: %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);
    printf("\n");
}


void priorityy(int processes[], int n, int burst_time[], int priority[]) {
    int waiting_time[n], turnaround_time[n], total_waiting_time = 0,
total_turnaround_time = 0;

    for (int i = 0; i < n; i++) {
        int highest_priority_index = i;

        // Find the highest priority job
        for (int j = i + 1; j < n; j++) {
            if (priority[j] < priority[highest_priority_index])
                highest_priority_index = j;
        }

        // Swap the highest priority job with the current process 
        int temp = burst_time[i]; 
        burst_time[i] = burst_time[highest_priority_index];
        burst_time[highest_priority_index] = temp;
  temp = processes[i];
        processes[i] = processes[highest_priority_index];
        processes[highest_priority_index] = temp;

        temp = priority[i];
        priority[i] = priority[highest_priority_index];
        priority[highest_priority_index] = temp;
    }

    waiting_time[0] = 0; // Waiting time for first process is 0

    // Calculating waiting time for each process
    for (int i = 1; i < n; i++) {
        waiting_time[i] = burst_time[i - 1] + waiting_time[i - 1];
        total_waiting_time += waiting_time[i];
    }

    // Calculating turnaround time for each process
    for (int i = 0; i < n; i++) {
        turnaround_time[i] = burst_time[i] + waiting_time[i];
        total_turnaround_time += turnaround_time[i];
    }

    printf("Priority Scheduling Algorithm\n");
    printf("----------------------------------------------\n");
    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");

    // Printing process details
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i], burst_time[i],
waiting_time[i], turnaround_time[i]);
    }

    printf("Average Waiting Time: %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);
    printf("\n");
}

int main() { 
    int n; 

    printf("Enter the number of processes: ");
    scanf("%d", &n); 
    
    int processes[n], burst_time[n], priority[n];

    printf("Enter the burst time and priority for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d\n", i + 1);
        printf("Burst Time: ");
        scanf("%d", &burst_time[i]);
        printf("Priority: ");
        scanf("%d", &priority[i]);
        processes[i] = i + 1;
    }

    int quantum;
    printf("Enter the time quantum for Round Robin: ");
    scanf("%d", &quantum);

    printf("\n");
    fcfs(processes, n, burst_time);
    sjf(processes, n, burst_time);
    roundRobin(processes, n, burst_time, quantum);
    priorityy(processes, n, burst_time, priority);

    return 0;
}



Output:-
 
 



Experiment 6:- Demonstrate the following Classical problems of synchronization using semaphores.
a.	Producer-Consumer 
b.	Dining Philosopher 

Program:-
#include<stdio.h>
#include<stdlib.h>
int mutex=1,full=0,empty=3,x=0;
int main()
{
int n;
void producer();
void consumer();
int wait(int);
int signal(int);
printf("\n1.producer\n2.consumer\n3.exit");
while(1)
{
printf("\n enter your choice");
scanf("%d",&n);
switch(n)
{
case 1:if((mutex==1)&&(empty!=0))
producer();
else
printf("buffer is full!!");
break;
case 2:if((mutex==1)&&(full!=0))
consumer();
else
printf("buffer is empty!!");
break;
case 3:
exit(0);
break;
}
}
return 0;
}
int wait(int s)
{
return(--s);
}
int signal(int s)
{
return(++s);
}
void producer()
{
mutex=wait(mutex);
full=signal(full);
empty=wait(empty);
x++;
printf("\n producer produces the item %d",x);
mutex=signal(mutex);
}
void consumer()
{
mutex=wait(mutex);
full=wait(full);
empty=signal(empty);
printf("\n consumer consumes the item %d",x);
x--;
mutex=signal(mutex);
}

Output:-
Producer-Consumer 
 
Dining Philosopher:-
stdio
stdlib
pthread
semaphore
unistd
sem_t room;
sem_t chpstick[5];
void *philosopher(void *)
void eat(int)
void eat(int phi) {
printf(philosopher %d is eating,phil)
}
int main() {
int i,a[5];
pthread_t tid[5];
sem_init(&room,0,4)
for(i=0;i<5;i++) 
sem_init(&chpstick[i],0,1);
for(i=0;i<5;i++) {
a[i]=i;
pthread_create(&tid[i],null,philosopher(void*)&a[i];
}
for(i=0;i<5;i++)
pthread_join(tid[i],null);
}
void *philosopher(void*num) {
int phil=*(int*)num;
sem_wait(&room);
sem_wait(&chopstick([phil+1)%5]);
eat(phil)
sleep(2);
printf(philosopher %d has finished eating,phil);
sem_post(&chopstick ([phil+1)%5]);
sem_post(&chopstick[phil]);
sem_post(&room);
}













 
 



